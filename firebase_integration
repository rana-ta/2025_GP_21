#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ---------- WIFI & FIREBASE CONFIG ----------
#define WIFI_SSID "YOUR_WIFI"
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"

#define API_KEY "YOUR_FIREBASE_API_KEY"
#define DATABASE_URL "YOUR_FIREBASE_DB_URL" 

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// ----------- OLED CONFIG -----------
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

#define SDA_PIN 21
#define SCL_PIN 22

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
MAX30105 particleSensor;

// ----------- Sensor Buffers ------------
#define BUFFER_SIZE 80
uint32_t irBuffer[BUFFER_SIZE];
uint32_t redBuffer[BUFFER_SIZE];

// ----------- Measured Values -------------
int32_t spo2;
int8_t validSPO2;
int32_t heartRate;
int8_t validHeartRate;

float smoothHR = 0;
float smoothSpO2 = 0;

void setup() {
  Serial.begin(115200);

  // -------- I2C & OLED --------
  Wire.begin(SDA_PIN, SCL_PIN);

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println("OLED failed");
    while (1);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Connecting WiFi...");
  display.display();

  // -------- WiFi Connect --------
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected!");

  // -------- Firebase Init --------
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Serial.println("✅ Firebase Connected");

  // -------- Initialize MAX30102 Sensor ------
  if (!particleSensor.begin(Wire, I2C_SPEED_STANDARD)) {
    Serial.println("MAX30102 not found");
    while (1);
  }

  particleSensor.setup(100, 2, 2, 100, 411, 16384);
  particleSensor.setPulseAmplitudeGreen(0);

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Pulse Sensor Ready");
  display.display();
  delay(1000);
}

void loop() {

  // Read sensor buffer
  for (int i = 0; i < BUFFER_SIZE; i++) {
    while (!particleSensor.available()) particleSensor.check();
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();
  }

  // Compute HR & SpO2
  maxim_heart_rate_and_oxygen_saturation(irBuffer, BUFFER_SIZE, redBuffer,
                                        &spo2, &validSPO2, &heartRate, &validHeartRate);

  bool fingerOff = (particleSensor.getIR() < 25000);

  if (fingerOff) {
    smoothHR = 0;
    smoothSpO2 = 0;
    validHeartRate = 0;
    validSPO2 = 0;
    Serial.println("No finger detected.");
  } else {
    if (validHeartRate && heartRate > 40 && heartRate < 130)
      smoothHR = 0.8 * smoothHR + 0.2 * heartRate;

    if (validSPO2 && spo2 > 80 && spo2 <= 100)
      smoothSpO2 = 0.7 * smoothSpO2 + 0.3 * spo2;
  }

  // OLED Display
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.print("HR ");
  display.print((smoothHR > 40) ? (int)smoothHR : 0);

  display.setCursor(0, 35);
  display.print("O2 ");
  display.print((smoothSpO2 > 80) ? (int)smoothSpO2 : 0);
  display.print("%");
  display.display();

  // -------- Send to Firebase --------
  Firebase.RTDB.setInt(&fbdo, "/sensorData/heartRate", (int)smoothHR);
  Firebase.RTDB.setInt(&fbdo, "/sensorData/spo2", (int)smoothSpO2);
  Firebase.RTDB.setInt(&fbdo, "/sensorData/ir", irBuffer[BUFFER_SIZE - 1]);
  Firebase.RTDB.setInt(&fbdo, "/sensorData/red", redBuffer[BUFFER_SIZE - 1]);
  Firebase.RTDB.setString(&fbdo, "/sensorData/status", fingerOff ? "No Finger" : "OK");

  Serial.println("✅ Sent to Firebase");

  delay(300);
}
